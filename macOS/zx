#!/usr/bin/env python3
# 不要使用Pycharm调试这个脚本, 会报如下错误:
# mode = tty.tcgetattr(self.STDIN_FILENO)
# termios.error: (25, 'Inappropriate ioctl for device') 
# 应该直接在终端中执行这个脚本
import sys
import fcntl
import struct
import termios

import pyotp
import pexpect

hosts = [
    {
        "ip": "",
        "port": "",
        "user": "",
        "password": "",
        "type": "jumpserver",
        "options": {
            "google_secret_key": ""
        }
    },
    {
        "ip": "",
        "port": "22",
        "user": "root",
        "password": "password",
        "type": "server",
        "options": {
            "google_secret_key": ""
        }
    }
]

def getwinsize(): #这个模块主要用于记录登录前的session的窗口大小，不然会发生登录后窗口大小变小的问题
    if 'TIOCGWINSZ' in dir(termios):
        TIOCGWINSZ = termios.TIOCGWINSZ
    else:
        TIOCGWINSZ = 1074295912
    s = struct.pack('HHHH', 0, 0, 0, 0)
    x = fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ, s)
    return struct.unpack('HHHH', x)[0:2]

def connection(cmd, pwd):
    """
    send：发送命令，不回车
    sendline：发送命令，回车
    sendcontrol：发送控制符，如：sendctrol('c')等价于‘ctrl+c'
    sendeof：发送eof
    :param cmd: 命令行
    :param pwd: 密码
    :return:
    """
    child = pexpect.spawn(cmd, timeout=3)
    winsize = getwinsize();
    child.setwinsize(winsize[0], winsize[1])
    ret = child.expect([".*assword.*", ".*Opt>", pexpect.EOF, pexpect.TIMEOUT], 2)
    if ret == 0:
        child.sendline("{0}".format(pwd))
        #ret = child.expect([".*assword.*", ".*Opt>"], 5)
        #if ret == 1:
        #    child.sendline("p")

    child.interact()


def main():
    print("序号 |     ip    |  端口  |   用户    |类型")
    
    for i, host in enumerate(hosts):
        print("{0}  |{1}|{2}|{3}|{4}".format(i + 1, host['ip'], host['port'], host['user'], host['type']))
    
    no = input("输入序号:")
    host = hosts[int(no) - 1]
    
    if host["type"] == "jumpserver":
        code = pyotp.TOTP(host['options']['google_secret_key']).now()
        print("生成的Google二次验证码: {0}".format(code))
        host["password"] = "{0}{1}".format(host["password"], code)
    
    cmd = "ssh -p {0} {1}@{2}".format(host["port"], host["user"], host["ip"])
    connection(cmd, host["password"])

if __name__ == "__main__":
    main()
